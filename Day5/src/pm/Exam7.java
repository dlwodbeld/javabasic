package pm;

public class Exam7 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//클레스와 객체
		//클레스와 객체의 개념을 익히는것은 세부 문법을 익히는 것만은 중요하다.
		
		//자바는 객체지향언어로 클래스,추상클래스,인터페이스와 같은 객체 지향적 문법요소를 사용하여 프로그램을 구성하게된다.
		//자바를 제대로 사용하려면 이러한 문법 요소를 먼저 이해하는 것이 아주 중요하다.
		//1.클래스의 개념
		//객체는 object 사용할수 있는 실체를 의미하고 클래스는 그 객체를 만드는 설계도라고 볼수있다.
		//따라서 1개의 클래스로 여러개의 객체를 만들수있다.
		//왜 클래스를 사용할까...
		//변수 -> 배열 ->구조체 -> 클래스
		
		//변수 : 다양한 형태의 데이터를 저장하기 위해 각각의 데이터를 저장하는 변수
		//배열 : 변수들이 많아지면 관리가 힘들다. 배열을 사용하면 같은 자료형인 병수들을 묶어서 한개의 새로운 자료형으로 관리할 수 있다.
		//구조체 : 배열은 같은 자료형만 묶을수 있으므로 여러 형태의 데이터를 한개의 배열로는 관리할수없다.
		// 배열의 단점을 보완하기 위해 사용되는 자료형
		//클래스 : 구조체는 데이터만 관리할수있다.
		// 여기에 어떤 기능들(메서드)을 추가한것이 바로 클래스이다.
		
		//절차지향(procedural programming)과 객체지향(object oriented programming)
		//객체 지향 개념 전에는 대부분의 프로그램을 절차지향형으로 구현했다.
		//절차지향은 순수대로 단계적으로 실행되도록 명령어를 나열하는 방식
		//클래스의 등장으로 객체지향형 프로그래밍 방식이 주로 사용된다.
		
		//자바에서의 객체 지향 요소
		//자바는 프로그램을 객체 단위로 구성해서 상호 연동시킨다.
		//자바에서의 객체지향 문법 요소는 크게 클래스, 인터페이스가 있고
		//클래스는 다시 일반클래스와 추상클래스로 나눌수있다.
		
		//크게보면 2개(클래스와 인터페이스) 작게보면 3개(일반클래스,추상클래스,인터페이스)
		
		//클래스몀과 파일명은 반드시 일치해야한다.
		//클래스의 밖에 올수있는것은 package import 또 다른 클래스 선언
		
		//접근 지정자 public 은 한개의 .java파일안에서 최대 1개의 클래스에만 붙일수 있다.
		
		//객체(object)와 인스턴스(instance)
		//클래스로 객체를 만드는데 객체와 클래스의 관계를 표현할때 인스턴스라고 합니다.
		//다른 말로 클래스를 인스턴스화 하면 인스턴스(객체)가 만들어진다.
		//객체라는 표현 인스턴스 라는 표현은 같은 대상 가리킨다.
		//클래스와의 관계를 표현할떄는 인스턴스라고하고
		//단독으로 그 자체만 표현할때는 객체라고한다.
		//ex) 인스턴스는 붕어빵기계로 찍어낸 붕어빵, 객체는 그냥 붕어빵.
		/*\
		 *	A a = new A();
		 *클래스명 객체명 = new 클래스명();
		 * 
		 */
		
		
		
		
		
		
		
		

	}

}
